---
import cookie from "cookie";
import bcrypt from "bcrypt";
import { db } from "../services/db";
import { Device } from "../entities/device";
import { User } from "../entities/user";
import { generateDeviceCookies } from "../lib/device/generateDeviceCookies";
import { generateAccessToken } from "../lib/jwt/generateAccessToken";

const errors = { username: "", password: "" };
if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData();
		const username = data.get("username") as string | undefined;
		const password = data.get("password") as string | undefined;
		if (typeof username !== "string" || username.length < 1) {
			errors.username += "Please enter a username. ";
		}
		if (typeof password !== "string" || password.length < 6) {
			errors.password += "Password must be at least 6 characters. ";
		}
		const hasErrors = Object.values(errors).some((msg) => msg);
		if (!hasErrors) {
			let headers = new Headers();
			const hostname = Astro.url.hostname;

			// check if username is taken : no username can be the same regardless of case
			const query = db
				.createQueryBuilder()
				.select("user")
				.from("user", "user")
				.where("LOWER(user.username) = LOWER(:username)", { username });
			const user = await query.getOne();
			if (user) {
				return new Response(JSON.stringify({ error: "username taken" }), {
					status: 400,
				});
			}
			// create new user
			const UserRepo = db.getRepository(User);
			const newUser = new User();
			newUser.username = username!;
			const salt = await bcrypt.genSalt();
			const hashedPassword = await bcrypt.hash(password!, salt);
			newUser.password = hashedPassword!;
			// save user
			const createdUser = await UserRepo.save(newUser);

			// create link between user and device
			const DeviceRepo = db.getRepository(Device);
			// check if device exists
			let deviceId = Astro.cookies.get("device_id")?.value;
			if (!deviceId) {
				const [deviceIdCookie, newDeviceId] = generateDeviceCookies(
					deviceId,
					hostname,
				);
				Astro.cookies.set("device_id", newDeviceId, {
					domain: hostname,
					expires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10),
					path: "/",
					sameSite: "lax",
				});
				deviceId = newDeviceId;
			}
			let device = await DeviceRepo.findOne({ where: { deviceId } });
			if (device) {
				// update device with user
				device.user = createdUser;
				await DeviceRepo.save(device);
			} else {
				// create new device
				const newDevice = new Device();
				newDevice.deviceId = deviceId ?? "";
				newDevice.user = createdUser;
				device = await DeviceRepo.save(newDevice);
			}
			// set auth_token cookie
			const accessToken = await generateAccessToken(createdUser.id, device?.id);
			Astro.cookies.set("auth_token", accessToken, {
				domain: hostname,
				expires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10),
				path: "/",
				sameSite: "lax",
			});

			return Astro.redirect("/");
		}
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
		}
	}
}
---

<h1>Register</h1>
<form method="POST">
	<label>
		Username:
		<input type="text" name="username" />
	</label>
	{errors.username && <p>{errors.username}</p>}
	<label>
		Password:
		<input type="password" name="password" required minlength="6" />
	</label>
	{errors.password && <p>{errors.password}</p>}
	<button>Register</button>
</form>
