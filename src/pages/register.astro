---
import cookie from "cookie";
import { Device } from "../entities/device";
import { User } from "../entities/user";
import { generateDeviceCookies } from "../lib/device/generateDeviceCookies";
import { generateAccessToken } from "../lib/jwt/generateAccessToken";
import { getTokenPayload } from "pocketbase";

const errors = { username: "", password: "" };
if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData();
		const username = data.get("username") as string | undefined;
		const password = data.get("password") as string | undefined;
		if (typeof username !== "string" || username.length < 1) {
			errors.username += "Please enter a username. ";
		}
		if (typeof password !== "string" || password.length < 6) {
			errors.password += "Password must be at least 6 characters. ";
		}
		const hasErrors = Object.values(errors).some((msg) => msg);
		if (!hasErrors) {
			let headers = new Headers();
			const hostname = Astro.url.hostname;
			const email = `${username?.toLowerCase()}@lowky.io`
			// check if username is taken : no username can be the same regardless of case
			const user = await Astro.locals.pb.collection('users').getFirstListItem("email = {:email}", {email})
			if (user) {
				return new Response(JSON.stringify({ error: "username taken" }), {
					status: 400,
				});
			}
			// create new user
			const newUser = await Astro.locals.pb.collection('users').authWithPassword(email, password!)

			// create link between user and device
			// check if device exists
			let deviceId = Astro.cookies.get("device_id")?.value;
			if (!deviceId) {
				const [deviceIdCookie, newDeviceId] = generateDeviceCookies(
					deviceId,
					hostname,
				);
				Astro.cookies.set("device_id", newDeviceId, {
					domain: hostname,
					expires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10),
					path: "/",
					sameSite: "lax",
				});
				deviceId = newDeviceId;
			}
			let device = await Astro.locals.pb.collection('devices').getFirstListItem("deviceId = {:deviceId}", {deviceId})
			if (device) {
				// update device with user
				device.user = newUser;
				await Astro.locals.pb.collection('devices').update(device.id, device);
			} else {
				// create new device
				const newDevice = {
					deviceId,
					user: newUser,
				};
				device = await Astro.locals.pb.collection('devices').create(newDevice);
			}
			// set auth_token cookie
			const payload = getTokenPayload(Astro.locals.pb.authStore.token);
			console.log({payload})
			Astro.cookies.set("pb_auth", {token: Astro.locals.pb.authStore.token}, {
				domain: hostname,
				expires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10),
				path: "/",
				sameSite: "lax",
			});

			return Astro.redirect("/");
		}
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
		}
	}
}
---

<h1>Register</h1>
<form method="POST">
	<label>
		Username:
		<input type="text" name="username" />
	</label>
	{errors.username && <p>{errors.username}</p>}
	<label>
		Password:
		<input type="password" name="password" required minlength="6" />
	</label>
	{errors.password && <p>{errors.password}</p>}
	<button>Register</button>
</form>
../services/pb