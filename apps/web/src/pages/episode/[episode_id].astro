---
import VideoPlayer from "$components/VideoPlayer/VideoPlayer.svelte";
import { BASE_VOLUME_PATH } from "$lib/constants";
import fs from "fs";
import WatchLayout from "$layouts/WatchLayout.astro";
import VideoContainer from "$components/VideoContainer.svelte";
import type { RecordModel } from "pocketbase";

const { episode_id } = Astro.params;
if (!episode_id) return Astro.redirect(`/series`);

const hostname = Astro.url.hostname;

let filepath: string;
let startTime = 0;
let watchedTimestamp;

const pb = Astro.locals.pb;

let episode: RecordModel;
try {
	episode = await pb.collection("episodes").getOne(episode_id, {
		expand: "series,season",
	});
} catch (error) {
	return Astro.redirect(`/series`);
}

console.log(episode);
filepath = episode?.pathname;
if (episode?.expand?.season)
	filepath = `${episode?.expand?.season?.pathname}/${filepath}`;
if (episode?.expand?.series)
	filepath = `${episode?.expand?.series?.pathname}/${filepath}`;

try {
	watchedTimestamp = await pb.collection("watched_timestamps").getFirstListItem(
		pb.filter(`episode = {:episode_id} && profile = {:profile_id}`, {
			episode_id: episode?.id,
			profile_id: Astro.locals?.profile?.id,
		}),
	);
} catch (error) {
	watchedTimestamp = await pb.collection("watched_timestamps").create({
		episode: episode?.id,
		profile: Astro.locals?.profile?.id,
		time: 0,
	});
	console.error(error);
}
const fullyWatched =
	watchedTimestamp?.timestamp &&
	watchedTimestamp?.timestamp === watchedTimestamp?.duration;
startTime = fullyWatched ? 0 : watchedTimestamp?.timestamp ?? 0;

// if the file does not exist redirect back
if (!fs.existsSync(`${BASE_VOLUME_PATH}/${filepath}`)) {
	return Astro.redirect(`/series/${episode?.expand?.series?.id ?? ""}`);
}

let nextEpisode: RecordModel | undefined;
try {
	nextEpisode = await pb.collection("episodes").getFirstListItem(
		pb.filter(`episode_index = {:next_episode_index}`, {
			next_episode_index: episode?.episode_index + 1,
		}),
	);
	if (!nextEpisode) nextEpisode = undefined;
} catch (error) {
	nextEpisode = undefined;
}
---

<WatchLayout title="Welcome to Astro.">
	<VideoContainer
		slot="video-player"
		transition:persist
		transition:name="video-container"
	>
		<VideoPlayer
			client:load
			{episode}
			filepath={filepath.replace(".mp4", "") ?? ""}
			{nextEpisode}
			{startTime}
			{hostname}
		/>
	</VideoContainer>
</WatchLayout>
