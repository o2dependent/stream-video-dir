---
import Layout from "$layouts/Layout.astro";
import VideoPlayer from "$components/VideoPlayer/VideoPlayer.svelte";
import DirectorySlider from "$components/DirectorySlider.svelte";

const { filepath } = Astro.params;
const hostname = Astro.url.hostname;
let startTime = 0;
let watchedTimestamp;
const pb = Astro.locals.pb;
try {
	watchedTimestamp = await pb.collection("watched_timestamps").getFirstListItem(
		pb.filter(`filepath = {:filepath} && profile = {:profile_id}`, {
			filepath,
			profile_id: Astro.locals?.profile?.id,
		}),
	);
} catch (error) {
	watchedTimestamp = await pb.collection("watched_timestamps").create({
		filepath,
		profile: Astro.locals?.profile?.id,
		time: 0,
	});
	console.error(error);
}
const fullyWatched =
	watchedTimestamp?.timestamp &&
	watchedTimestamp?.timestamp === watchedTimestamp?.duration;
startTime = fullyWatched ? 0 : watchedTimestamp?.timestamp ?? 0;

//TODO: MOVE THE BELOW CODE INTO "DirectoryList.astro" after moving the svelte file to astro
import { BASE_VOLUME_PATH } from "$lib/constants";
import fs from "fs";
import WatchLayout from "$layouts/WatchLayout.astro";
import VideoContainer from "$components/VideoContainer.svelte";
const sortByPath = (a: any, b: any) => {
	const aPath = a.path.split(" ");
	const bPath = b.path.split(" ");
	for (let i = 0; i < aPath.length; i++) {
		const bothAreNumbers =
			!isNaN(parseInt(aPath[i])) && !isNaN(parseInt(bPath[i]));

		if (bothAreNumbers && parseInt(aPath[i]) > parseInt(bPath[i])) return 1;
		if (bothAreNumbers && parseInt(aPath[i]) < parseInt(bPath[i])) return -1;
	}
	return 0;
};
// get filepath param
let directory: {
	id: string;
	path: string;
	timestamp?: number;
	updated?: string;
	duration?: number;
}[] = [];
let latestVideoIdx: number | undefined;

try {
	// remove everything after the last slash
	let filepath =
		Astro.params.filepath?.split("/")?.slice(0, -1)?.join("/") ?? "";
	let dir = fs.readdirSync(
		`${BASE_VOLUME_PATH}${filepath ? `/${filepath}` : ""}`,
	);
	let newDirectory = dir?.filter((file) => !file.startsWith("."));
	console.log(`${filepath}/${newDirectory[0]?.replace(".mp4", "")}`);
	const dirFilter = newDirectory
		.map((filename) =>
			pb.filter("(filepath = {:path} && profile = {:profileId} )", {
				path: `${filepath}/${filename?.replace(".mp4", "")}`,
				profileId: Astro.locals.profile?.id,
			}),
		)
		.join(" || ");
	const watchedTimestamps = await pb
		.collection("watched_timestamps")
		.getFullList({
			filter: `${dirFilter}`,
			sort: "-updated",
		});
	// add watched timestamps to directory
	directory = newDirectory
		.map((filename) => {
			const watchedTimestamp = watchedTimestamps.find((wt, idx) => {
				const isSamePath =
					wt.filepath === `${filepath}/${filename?.replace(".mp4", "")}`;
				return isSamePath;
			});
			return {
				id: watchedTimestamp?.id ?? "NO ID FOUND",
				path: filename,
				timestamp: watchedTimestamp?.timestamp ?? 0,
				updated: watchedTimestamp?.updated,
				duration: watchedTimestamp?.duration || 1,
			};
		})
		.sort(sortByPath);
	latestVideoIdx = directory?.findIndex(
		(wt) => wt.path === Astro.params.filepath?.split("/").at(-1) + ".mp4",
	);
} catch (err) {
	console.error(err);
}
console.log({ directory });
---

<WatchLayout title="Welcome to Astro.">
	<VideoContainer
		slot="video-player"
		transition:persist
		transition:name="video-container"
	>
		<VideoPlayer
			client:load
			filepath={filepath ?? ""}
			duration={latestVideoIdx !== undefined
				? directory?.[latestVideoIdx]?.duration
				: undefined}
			nextVid={latestVideoIdx !== undefined &&
			latestVideoIdx + 1 < directory?.length
				? {
						videoPath: `${
							Astro.params.filepath?.split("/")?.slice(0, -1)?.join("/") ?? ""
						}/${directory?.[latestVideoIdx + 1]?.path.replace(".mp4", "")}`,
						videoTitle: directory?.[latestVideoIdx + 1]?.path.replace(
							".mp4",
							"",
						),
						duration: directory?.[latestVideoIdx + 1]?.duration,
						timestamp: directory?.[latestVideoIdx + 1]?.timestamp,
				  }
				: undefined}
			{startTime}
			{hostname}
		/>
	</VideoContainer>
	<!-- <div class="max-w-screen-3xl w-full mx-auto px-4 flex flex-col">
		<h1 class="text-5xl">{filepath?.split("/")?.at(-1)}</h1>
		<div class="grid grid-cols-1 pt-10 relative rounded overflow-hidden">
			<div
				class="px-4 text-xl font-bold h-10 absolute top-0 left-0 bg-slate-900 w-full flex items-center"
			>
				<a
					href={`/directory/${
						Astro.params.filepath?.split("/")?.slice(0, -1)?.join("/") ?? ""
					}`}
				>
					<h2>
						{Astro.params.filepath?.split("/")?.slice(0, -1)?.join("/") ?? ""}
					</h2>
				</a>
			</div>
			<DirectorySlider client:load {directory} {latestVideoIdx} {filepath} />
		</div>
	</div> -->
</WatchLayout>
