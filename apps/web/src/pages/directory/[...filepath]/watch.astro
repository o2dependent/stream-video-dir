---
import Layout from "$layouts/Layout.astro";
import VideoPlayer from "$components/VideoPlayer.svelte";

// get filepath param
const { filepath } = Astro.params;
const hostname = Astro.url.hostname;
let startTime = 0;
let watchedTimestamp;
const pb = Astro.locals.pb;
try {
	watchedTimestamp = await pb.collection("watched_timestamps").getFirstListItem(
		pb.filter(`filepath = {:filepath} && profile = {:profile_id}`, {
			filepath,
			profile_id: Astro.locals?.profile?.id,
		}),
	);
} catch (error) {
	watchedTimestamp = await pb.collection("watched_timestamps").create({
		filepath,
		profile: Astro.locals?.profile?.id,
		time: 0,
	});
	console.error(error);
}
startTime = watchedTimestamp?.timestamp ?? 0;
console.log({ startTime });

//TODO: MOVE THE BELOW CODE INTO "DirectoryList.astro" after moving the svelte file to astro
import { BASE_VOLUME_PATH } from "$lib/constants";
import fs from "fs";
import VideoThumbnail from "$components/VideoThumbnail.svelte";
const sortByPath = (a: any, b: any) => {
	const aPath = a.path.split(" ");
	const bPath = b.path.split(" ");
	for (let i = 0; i < aPath.length; i++) {
		const bothAreNumbers =
			!isNaN(parseInt(aPath[i])) && !isNaN(parseInt(bPath[i]));

		if (bothAreNumbers && parseInt(aPath[i]) > parseInt(bPath[i])) return 1;
		if (bothAreNumbers && parseInt(aPath[i]) < parseInt(bPath[i])) return -1;
	}
	return 0;
};
// get filepath param
let directory: {
	id: string;
	path: string;
	timestamp?: number;
	updated?: string;
	duration?: number;
}[] = [];
let latestVideoId: string | undefined;
let latestVideoIdx: number | undefined;

try {
	// remove everything after the last slash
	let filepath =
		Astro.params.filepath?.split("/")?.slice(0, -1)?.join("/") ?? "";
	let dir = fs.readdirSync(
		`${BASE_VOLUME_PATH}${filepath ? "/" + filepath.split("/") : ""}`,
	);
	let newDirectory = dir?.filter((file) => !file.startsWith("."));
	const dirFilter = newDirectory
		.map((filename) =>
			pb.filter("(filepath = {:path} && profile = {:profileId} )", {
				path: `${filepath}/${filename?.replace(".mp4", "")}`,
				profileId: Astro.locals.profile?.id,
			}),
		)
		.join(" || ");
	const watchedTimestamps = await pb
		.collection("watched_timestamps")
		.getFullList({
			filter: `${dirFilter}`,
			sort: "-updated",
		});
	// add watched timestamps to directory
	directory = newDirectory
		.map((filename) => {
			const watchedTimestamp = watchedTimestamps.find((wt, idx) => {
				const isSamePath =
					wt.filepath === `${filepath}/${filename?.replace(".mp4", "")}`;
				return isSamePath;
			});
			return {
				id: watchedTimestamp?.id ?? "NO ID FOUND",
				path: filename,
				timestamp: watchedTimestamp?.timestamp ?? 0,
				updated: watchedTimestamp?.updated,
				duration: watchedTimestamp?.duration || 1,
			};
		})
		.sort(sortByPath);
	latestVideoIdx = directory?.findIndex(
		(wt) => wt.path === Astro.params.filepath?.split("/").at(-1) + ".mp4",
	);
	console.log({
		filepath: Astro.params.filepat?.split("/").at(-1) + ".mp4",
		wtFilepath: directory?.map((wt) => wt.path),
		latestVideoIdx,
	});
} catch (err) {
	console.error(err);
}
---

<Layout title="Welcome to Astro.">
	<main class="flex flex-col gap-2 w-full pb-8">
		<eo-video-player
			data-hostname={hostname}
			data-filepath={filepath}
			data-latest-video-idx={latestVideoIdx}
		>
			<div id="video-container" class="w-full relative">
				<div
					class="absolute top-0 left-0 h-full w-full flex flex-col items-center justify-center bg-black ring-gray-900 -z-10"
				>
				</div>
				<VideoPlayer
					client:load
					filepath={filepath ?? ""}
					nextVid={latestVideoIdx !== undefined
						? {
								videoPath: `${
									Astro.params.filepath?.split("/")?.slice(0, -1)?.join("/") ??
									""
								}/${directory?.[latestVideoIdx + 1]?.path.replace(".mp4", "")}`,
								videoTitle: directory?.[latestVideoIdx + 1]?.path.replace(
									".mp4",
									"",
								),
								duration: directory?.[latestVideoIdx + 1]?.duration,
								timestamp: directory?.[latestVideoIdx + 1]?.timestamp,
						  }
						: undefined}
					{startTime}
					{hostname}
				/>
			</div>
		</eo-video-player>
		<div class="">
			<div class="max-w-screen-3xl w-full mx-auto px-4 flex flex-col">
				<h1 class="text-5xl">{filepath?.split("/")?.at(-1)}</h1>
				<div class="grid grid-cols-1 pt-10 relative rounded overflow-hidden">
					<div
						class="px-4 text-xl font-bold h-10 absolute top-0 left-0 bg-slate-900 w-full flex items-center"
					>
						<a
							href={`/directory/${
								Astro.params.filepath?.split("/")?.slice(0, -1)?.join("/") ?? ""
							}`}
						>
							<h2>
								{
									Astro.params.filepath?.split("/")?.slice(0, -1)?.join("/") ??
										""
								}
							</h2>
						</a>
					</div>
					<eo-directory-list data-latest-video-idx={latestVideoIdx}>
						<div id="directory-list" class="swiper py-1 w-full">
							<div class="swiper-wrapper">
								{
									directory?.map(
										({ path, timestamp, updated, duration, id }, idx) => {
											//TODO: add directory in list later
											if (!path.includes(".mp4")) return;

											const isCurrentVideo = idx === latestVideoIdx;
											return (
												<div class="swiper-slide">
													<VideoThumbnail
														client:load
														videoTitle={path.replace(".mp4", "")}
														videoPath={`${
															Astro.params.filepath
																?.split("/")
																?.slice(0, -1)
																?.join("/") ?? ""
														}/${path.replace(".mp4", "")}`}
														{isCurrentVideo}
														{duration}
														{timestamp}
														{idx}
													/>
												</div>
											);
										},
									)
								}
							</div>

							<!-- If we need navigation buttons -->
							<!-- <div class="swiper-button-prev"></div>
							<div class="swiper-button-next"></div> -->

							<!-- If we need scrollbar -->
							<div class="swiper-scrollbar"></div>
						</div>
					</eo-directory-list>
				</div>
			</div>
		</div>

		<script>
			import Swiper from "swiper";
			import "swiper/css";

			let currentVideoProgress: HTMLElement | undefined | null;
			let currentVideoProgressContainer: HTMLElement | undefined | null;
			class EOVideoPlayer extends HTMLElement {
				constructor() {
					super();
					const video = this.querySelector("video");

					const timeupdate = (e: Event) => {
						if (
							currentVideoProgress &&
							currentVideoProgressContainer &&
							video?.duration
						) {
							const percent =
								((e.currentTarget as HTMLVideoElement).currentTime /
									video?.duration) *
								100;
							currentVideoProgress.style.width = `${percent}%`;
							if (percent >= 99.9) {
								currentVideoProgress.classList.remove("bg-orange-500");
								currentVideoProgress.classList.add("bg-green-500");
							} else {
								currentVideoProgress.classList.remove("bg-green-500");
								currentVideoProgress.classList.add("bg-orange-500");
							}
						}
					};
					video?.addEventListener("timeupdate", timeupdate);
				}
			}
			customElements.define("eo-video-player", EOVideoPlayer);
			class EODirectoryList extends HTMLElement {
				constructor() {
					super();
					const currentVideo: HTMLAnchorElement | null = this.querySelector(
						`#directory-list #directory-list-item-${this.dataset.latestVideoIdx}`,
					);
					const container = this.querySelector("#directory-list");
					if (container) {
						const swiper = new Swiper("#directory-list", {
							slidesPerView: 3,
							spaceBetween: 4,
							freeMode: {
								enabled: true,
								momentumRatio: 2,
								sticky: false,
								momentum: true,
							},
							breakpoints: {
								768: {
									slidesPerView: 3,
								},
								1024: {
									slidesPerView: 5,
								},
							},
						});
						if (typeof this.dataset.latestVideoIdx !== "undefined")
							swiper.slideTo(
								Math.max(0, parseInt(this.dataset.latestVideoIdx) - 1),
							);
					}

					currentVideoProgress = currentVideo?.querySelector(
						".directory-list-item-progress",
					);
					currentVideoProgressContainer = currentVideo?.querySelector(
						".directory-list-item-progress-container",
					);

					container?.scrollTo({
						top: (currentVideo?.offsetTop ?? 0) - 42,
					});
				}
			}
			customElements.define("eo-directory-list", EODirectoryList);
		</script>
	</main>
</Layout>
